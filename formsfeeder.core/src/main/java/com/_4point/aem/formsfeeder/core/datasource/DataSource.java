package com._4point.aem.formsfeeder.core.datasource;

import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.Map;
import java.util.Optional;

/**
 * DataSource is an generic object used to contain data.  It is used to transfer data into and out of plugins.
 * 
 * FormsFeeder transfers any and all parameters provided to a plugin by the caller into a {@link DataSourceList} containing
 * one DataSource per parameter.  It doesn't matter how the parameters are passed in (as a query parameter, as part
 * of a multipart/form-data POST or as part of a JSON POST).  The parameters are transferred into a DataSource (keeping
 * the parameter name as the DataSource name) and then provided to the plugin as part of a DataSourceList.
 * 
 * Likewise the outputs from a plugin are also returned to FormsFeeder as seriee of DataSource objects within 
 * a DataSourceList.  The DataSources are then transferred into the response.
 *
 */
public interface DataSource {
	/**
	 * Prefix used for data sources that have names generated by FormsFeeder
	 */
	public static final String FORMSFEEDER_PREFIX = "formsfeeder:";
	/**
	 * Data Source Name we use to pass in the bytes from a POST body that does not include name.
	 */
	public static final String FORMSFEEDER_BODY_BYTES_DS_NAME = FORMSFEEDER_PREFIX + "BodyBytes";

	/**
	 * The content type of this data source which indicates what the data source contains.  It is
	 * based on <a href="https://en.wikipedia.org/wiki/Media_type">standard internet media type</a>.  
	 *   
	 * @return
	 */
	MimeType contentType();
	
	/**
	 * Returns an input stream that contains the contents of this DataSource.
	 * 
	 * @return
	 */
	InputStream inputStream();
	
	/**
	 * Returns the name of this DataSource.  It cannot be null, all data sources must have a name 
	 * (empty string is valid though).
	 * 
	 * @return
	 */
	String name();

	/**
	 * Returns an output stream that can be used to write data to this DataSource.  This will replace any
	 * data that was previously in the DataSource.
	 * 
	 * @return
	 */
	OutputStream outputStream();
	
	/**
	 * Returns a filename that is associated with a DataSource.
	 * 
	 * The filename is an optional attribute of the DataSource.  If the DataSource was created from a file, 
	 * then this attribute will contain the filename of that file used to create the DataSource.
	 * 
	 * @return
	 */
	Optional<Path> filename();
	
	/**
	 * Returns any attributes associated with a DataSource.
	 * 
	 * DataSources may optionally have attributes associated with them.  These attributes are name/value pairs that can
	 * be used to carry metadata about the DataSource.
	 * 
	 * Most DataSources will not have attributes associated with them by default.
	 * 
	 * @return
	 */
	Map<String, String> attributes();
}
