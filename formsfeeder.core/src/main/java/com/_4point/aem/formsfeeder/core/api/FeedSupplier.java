package com._4point.aem.formsfeeder.core.api;

import com._4point.aem.formsfeeder.core.datasource.DataSourceList;

/**
 * FeedProducer is an interface that is implemented by classes that wish to produce a feed from a FeedConsumer.
 *
 */
@FunctionalInterface
public interface FeedSupplier {
	
	/**
	 * Get the list of DataSource objects for this transaction.
	 * 
	 * This method is allowed to block in order to wait for input but is not required to do so.  It can also
	 * return an empty list if it does not wish to block.
	 * 
	 * If this method returns null or throws an exception, that is taken as a shutdown request to upstream processors and this
	 * producer will no longer be called.
	 * 
	 * @return
	 */
	public DataSourceList get() throws FeedSupplierException;

	/**
	 * Exceptions generated by a FeedProducer must be wrapped in a FeedProducerException.
	 *
	 */
	@SuppressWarnings("serial")
	public static class FeedSupplierException extends Exception {

		private FeedSupplierException() {
			super();
		}

		private FeedSupplierException(String message, Throwable cause) {
			super(message, cause);
		}

		private FeedSupplierException(String message) {
			super(message);
		}

		private FeedSupplierException(Throwable cause) {
			super(cause);
		}
		
	}
}
