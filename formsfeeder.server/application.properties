logging.level.com._4point.aem.formsfeeder.server=TRACE
logging.level.com._4point.aem.formsfeeder.pf4j=TRACE
logging.level.com._4point.aem.formsfeeder.plugins=TRACE
# logging.level.org.glassfish.jersey=TRACE
formsfeeder.plugins.mock.configValue=FromApplicationProperties
formsfeeder.aem.host=localhost
formsfeeder.aem.port=4502
formsfeeder.aem.username=admin
formsfeeder.aem.secret=admin
# uncomment the following line to enable https communication to AEM
# formsfeeder.aem.protocol=https
# uncomment the following line if you're connecting to a JEE AEM instance.
# formsfeeder.aem.serverType=jee

#
# DB Configuration - modify the next few lines to configure a single database.
#spring.datasource.url=jdbc:sqlserver://MACHINENAME;databaseName=cwb_dev
#spring.datasource.username=sa
#spring.datasource.password=4ptadmin
#spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
#
# Additionally, up to 5 datasources may be configured using the following lines:
#spring.datasource.datasource1.url=jdbc:h2:file:C:/temp/testh2db1 
#spring.datasource.datasource1.username=sa
#spring.datasource.datasource1.password=sa
#spring.datasource.datasource1.driver-class-name=org.h2.Driver
#
#spring.datasource.datasource2.url=jdbc:h2:file:C:/temp/testh2db2 
#spring.datasource.datasource2.username=sa
#spring.datasource.datasource2.password=sa
#spring.datasource.datasource2.driver-class-name=org.h2.Driver
#   ... and so on.
# The additional datasources need to have have a @Qualifier annotation, as in:
#  @Qualifier("jdbcTemplate1") - refers to datasource1
#  @Qualifier("jdbcTemplate2") - refers to datasource2
#   ... and so on.
# See the JdbcPlugin for example code.
# 
# Email Configuration - modify the next few lines to configure an email server.
#spring.mail.host=localhost
#spring.mail.port=25
#spring.mail.username=emailuser@example.com
#spring.mail.password=password
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=false
#
# CORS Filter configuration - modify the line below to return cors headers
#    The value in the property below will be inserted into the Access-Control-Allow-Origin origin in all responses.
#    The value of the Access-Control-Allow-Methods is fixed at GET, POST, OPTIONS, HEAD.
# formsfeeder.enable_cors=*
#    The value in the property below will be concatenated to the Access-Control-Allow-Headers header in all responses.
#    The default value of Access-Control-Allow-Headers is "origin, content-type, accept, authorization".
#    Multiple headers to added should be separated by ", ".
# formsfeeder.cors_add_headers=formsfeeder_token
#
# HTTPS Configuration Settings
# The following settings are used for setting up SSL.  Strictly speaking they are Spring Boot settings, not FormsFeeder
# specific settings, however they are common enough that it is worth documenting them in this file.
#server.port=8443
#server.ssl.enabled=true
#server.ssl.key-store=file:[keystore name].p12
#server.ssl.key-store-password=[keystore password]
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=[keystore alias]
#
#
# Password encryption is obtained by using Jasypt
#  1) In order to encrypt a property value, you can do this multiple ways:
#     - encode it using the following online tool: https://www.devglan.com/online-tools/jasypt-online-encryption-decryption 
#     - download jasypt and run java -cp //jasypt-3.0.3/lib/jasypt-3.0.3.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=\u201Dxyz123\u2033 password=secretkey algorithm=PBEWithMD5AndDES
#  2) Make the password used to encrypt the password available to FormsFeeder by placing it in the jasypt.encryptor.password configuration
#  property.  This can be in any of the places it can be found by FormsFeeder, for example in any of the following places:
#      - an environment variable called JASYPT_ENCRYPTOR_PASSWORD
#      - a command line argument -Djasypt.encryptor.password
#      - in the application.properties file
#  3) Place the encrypted value within ENC() in the properties file, for example: spring.mail.password=ENC(kNuS1WAezYE7cph7zXVTiPSQSdHTx7Kv)
#
# If the password is to be stored in the application.properties file, then you can uncomment the following line:
#jasypt.encryptor.password=[jasypt_password]

#
# Use Absolute URLs in AEM links
#  HTML5 and Adaptive Forms can contain absolute paths in the dependency links (Link and Script Elements) instead of relative links
#  (which is the default).
#
#   Unfortunately, this is split into two parts:
#   1) the HTML5/AF APIs have a UrlFilter that is used to replace the URLs in the form itself. This is accomplished when creating the URL
#      filter function.  Instead of just using the StandardFormsFeederUrl (StandardFormsFeederUrlFilters.getStandardInputStreamFilter()), 
#      you need to perform the following:
#      StandardFormsFeederUrlFilters.getUrlFilterBuilder()
#                                   .absoluteLocation(location)
#                                   .buildInputStreamFn()
#
#      where location is a String containing the machine name and port.  StandardFormsFeederUrlFilters also has a constant called
#      FORMSFEEDER_AF_BASE_LOCATION_PROP which returns "formsfeeder.af-base-location" to help pull the value below
#      from the application.properties file.
# 
#   2) the FormFeeder AEM proxy code must replace a line in utils.js that determines the context.  This is done using the property below. 
#formsfeeder.af-base-location=machinename:8080
#
#  The property and the absoluteLocation parameter must match for absolute paths to work.

#
