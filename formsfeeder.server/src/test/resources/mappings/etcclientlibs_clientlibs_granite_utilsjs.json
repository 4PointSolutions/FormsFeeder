{
  "id" : "a3994d11-d51e-462d-ba5b-671c86c02f6b",
  "name" : "etcclientlibs_clientlibs_granite_utilsjs",
  "request" : {
    "url" : "/etc.clientlibs/clientlibs/granite/utils.js",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "base64Body" : "",
    "headers" : {
      "Date" : "Mon, 31 Jan 2022 23:22:47 GMT",
      "X-Content-Type-Options" : "nosniff",
      "Set-Cookie" : "cq-authoring-mode=TOUCH; Path=/; Expires=Mon, 07-Feb-2022 23:22:47 GMT; Max-Age=604800",
      "Expires" : "Thu, 01 Jan 1970 00:00:00 GMT",
      "Last-Modified" : "Mon, 08 Nov 2021 21:01:23 GMT",
      "Content-Type" : "application/javascript;charset=utf-8"
    }
  },
  "uuid" : "a3994d11-d51e-462d-ba5b-671c86c02f6b",
  "persistent" : true,
  "insertionIndex" : 9
}