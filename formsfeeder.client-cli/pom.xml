<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com._4point.aem</groupId>
		<artifactId>formsfeeder</artifactId>
		<version>0.0.2-SNAPSHOT</version>
	</parent>
	<artifactId>formsfeeder.client-cli</artifactId>
	<name>Command Line Interface to FormsFeeder Client Library</name>
	<description>Implements a CLI program that uses the FormsFeeder Client Library.</description>

	<!--
	In order to build this project, you just need to use the standard build procedure with a 'package' goal.
	 -->
	<properties>
		<!--  Client applications may be in Java 8, so compile for that. -->
		<maven.compiler.source>8</maven.compiler.source>
		<maven.compiler.target>8</maven.compiler.target>
        <maven.compiler.release>8</maven.compiler.release>

		<commons-cli.version>1.4</commons-cli.version>
		<jcabi-xml.version>0.22.1</jcabi-xml.version>
		<wiremock.version>2.26.3</wiremock.version>
		<guava.version>29.0-jre</guava.version>
	</properties>

	<build>
		<plugins>
			<!-- Maven Shade Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.4</version>
				<configuration>
					<transformers>
						<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<manifestEntries>
								<Main-Class>formsfeeder.client.cli.CommandLineClient</Main-Class>
							</manifestEntries>
						</transformer>
					</transformers>
				</configuration>
				<executions>
					<execution>
						<id>shade-package</id>
						<!-- bind to the packaging phase -->
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>com._4point.aem</groupId>
			<artifactId>formsfeeder.client</artifactId>
			<version>0.0.2-SNAPSHOT</version>
		</dependency>
		<!-- JUnit 5 -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- For parsing command line arguments -->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>${commons-cli.version}</version>
		</dependency>
		<!-- Guava is not actually required for this project however it is a common requirements for both -->
		<!-- JimFS and WireMock, so we include it here to resolve conflicts between the two. -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Provide slf4j implementation. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- In-memory File System for writing/reading during unit testing. -->
		<dependency>
			<groupId>com.google.jimfs</groupId>
			<artifactId>jimfs</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- XML Library for testing -->
		<dependency>
			<groupId>com.jcabi</groupId>
			<artifactId>jcabi-xml</artifactId>
			<version>${jcabi-xml.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- WireMock library for simulating a formfeeder server. -->
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock-jre8</artifactId>
			<version>${wiremock.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>